(defun tailing-fft (data steps)
    (let ((n (length data)))
        (loop
            (when (<= steps 0) (return))
            (decf steps)
            (let ((sum (aref data (1- n))) sign-count)
                (loop for i from (- n 2) downto 0 do
                    (incf sum (aref data i))
                    (setf (aref data i) (abs (rem sum 10)))
                )
            )
        )
    )
)

(defun repeat-string (string times)
    (if (= times 1)
        string
        (multiple-value-bind (q r) (floor times 2)
            (let ((result (repeat-string string q)))
                (if (= 0 r)
                    (concatenate 'string result result)
                    (concatenate 'string result result string)
                )
            )
        )
    )
)

(let ((data nil))
    (with-open-file (input-stream "input")
        (let* (
                (conversion-table (make-hash-table))
                (input (read-line input-stream))
                (offset (read-from-string (subseq input 0 7)))
            )
            (map nil (lambda (k v) (setf (gethash k conversion-table) v)) "0123456789" '(0 1 2 3 4 5 6 7 8 9))
            (setq input (subseq (repeat-string input 10000) offset))
            (setq data (make-array (list (length input)) :element-type 'integer))
            (map-into data (lambda (k) (gethash k conversion-table)) input)
        )
    )
    (tailing-fft data 100)
    (loop for i below 8 do (princ (aref data i)))
    (terpri)
)